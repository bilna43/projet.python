import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import calendar

conso=pd.read_excel("/Users/tiber/Documents/Projet Python/conso-quot-brute-régional.xlsx")

def moyenne_glissante(valeurs, intervalle):
    indice_debut = (intervalle - 1) // 2
    liste_moyennes = [sum(valeurs[i - indice_debut:i + indice_debut + 1]) / intervalle for i in range(indice_debut, len(valeurs) - indice_debut)]
    return liste_moyennes

def trans_timetofloat(x):
    return x.hour+x.minute/60.0

def trans_jour(x):
    return x[8:10]
    
def trans_mois(x):
    return x[5:7]

def jour_semaine(x):
    int_mois=int(x[5:7])
    int_jour=int(x[8:10])
    return calendar.weekday(2020,int_mois,int_jour)

def conso_moy_reg(region,date):
    return consoelec[(consoelec['Region']==region)&(consoelec['Date']==date)][['Date','Consommation brute elecricite (MW)']].groupby('Date').mean()


            
conso.drop(['Code INSEE r√©gion','Statut - RTE','Date - Heure','Consommation brute gaz (MW PCS 0¬∞C) - GRTgaz', 'Statut - GRTgaz',
'Consommation brute gaz (MW PCS 0¬∞C) - Ter√©ga', 'Statut - Ter√©ga'],axis=1, inplace= True)


conso['Region'].unique
conso['Region'] = conso['Region'].map({'Provence-Alpes-C√¥te d\'Azur':'Provence Alpes Cote d\'Azur',
                             '√éle-de-France':'Ile de France',
                             'Nouvelle-Aquitaine':'Nouvelle-Aquitaine',
                             'Occitanie':'Occitanie',
                             'Grand Est':'Grand Est',
                             'Pays de la Loire':'Pays de la Loire',
                             'Bretagne' : 'Bretagne',
                             'Hauts-de-France': 'Hauts-de-France',
                             'Centre-Val de Loire': 'Centre-Val de Loire',
                             'Normandie': 'Normandie',
                             'Bourgogne-Franche-Comt√©':'Bourgogne France Comté',
                             'Auvergne-Rh√¥ne-Alpes':'Auvergne Rohne Alpes'})


conso=conso.assign(Rapport_conso_Heure_elec=0)
conso['Heure']=conso['Heure'].transform(trans_timetofloat)
conso['Date']=conso['Date'].astype(str)
conso['Jour']=conso['Date'].transform(trans_jour)
conso['Mois']=conso['Date'].transform(trans_mois)
conso['Jour semaine']=conso['Date'].transform(jour_semaine)


conso['Jour semaine'] = conso['Jour semaine'].map({0:'Dimanche',1:'Lundi',2:'Mardi',3:'Mercredi',
                                                   4:'Jeudi',5:'Vendredi',6:'Samedi'})


consoelec=conso[['Mois','Jour','Jour semaine','Heure','Region','Consommation brute elecricite (MW)','Date']]

consoelec['Consommation brute elecricite (MW)'].replace('', np.nan, inplace=True)

consoelec.dropna(subset=['Consommation brute elecricite (MW)'], inplace=True)





for j in range(0, len(consoelec)-1):
    jour=consoelec.iloc[j]['Date']
    reg=consoelec.iloc[j]['Region']
    consoelec.at[j,'Rapport_conso_Heure_elec']=consoelec.iloc[j]['Consommation brute elecricite (MW)']/conso_moy_reg(reg,jour).iloc[0]['Consommation brute elecricite (MW)']

conso_moy_elec_heure=consoelec[['Heure','Rapport_conso_Heure_elec']].groupby('Heure').mean()
conso_moy_elec_heure=conso_moy_elec_heure.reset_index(level='Heure')


plt.plot(conso_moy_elec_heure['Heure'],conso_moy_elec_heure['Rapport_conso_Heure_elec'])
plt.title('Evolution de la consomation en élécricité par heure')
plt.xlabel('Heure')
plt.ylabel('Consommation elecricite')
plt.show()


